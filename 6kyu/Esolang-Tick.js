/* ========== ========== ========== ========== ========== ==========*/
// https://www.codewars.com/kata/587edac2bdf76ea23500011a
/* ========== ========== ========== ========== ========== ==========*/
/*
Esolang: Tick

Description:
Task

Make a custom esolang interpreter for the language Tick. Tick is a descendant of Ticker but also very different data and command-wise.
Syntax/Info

Commands are given in character format. Non-command characters should be ignored. Tick has an potentially infinite memory as opposed to Ticker(which you have a special command to add a new cell) and only has 4 commands(as opposed to 7). Read about this esolang here.
Commands

>: Move data selector right

<: Move data selector left(infinite in both directions)

+: Increment memory cell by 1. 255+1=0

*: Add ascii value of memory cell to the output tape.
Examples

Hello world!



*/



// Solution
function interpreter(tape) {
  const memory = new Map([[0,0]]);
  let pointer = 0;
  let output = "";

  for (const cmd of tape) {
    if(cmd === ">") {
        pointer++;
        if (!memory.has(pointer)) memory.set(pointer, 0);
    } else if (cmd === "<") {
      pointer--;
      if (!memory.has(pointer)) memory.set(pointer, 0);
    } else if (cmd === "+") {
     memory.set(pointer, (memory.get(pointer)+1) & 0xFF) // wrap 0â€“255
    } else if (cmd === "*") {
      output += String.fromCharCode(memory.get(pointer));
    }
  }
  return output;
}



// Test Codes
const assertEquals = (actual, expected, msg) => {
    if(actual === expected) console.log("Correct");
    else console.error(`Incorrect. ${msg}`)
}
assertEquals(interpreterello world!");

assertEquals(interpreter("+++werdfxcvcvbbvhgjgujuip+se+++++++++++w+wer++df+f+ghf+sqadsa++++++++++++++++++++++++uoui++++++++uio++++o++++++i+uiihfgd+df+++sd++++*>+++++sfd++2+34+4545++6567678890+8++++++456456+++++++001++1+1+1+11+11000++++++232434544++++++++++56765+56+++++++++++++sdfsdf345sd+++++++++sdf+d+++vxc+++4++45+dgfd3f++ef+++++34+w++34++f++wf+fwe3rfssd+fvcvbv+bvbn+m+++*>++++++++++++++++++++++SDF++DFERERDVDFGCVBVBNBNMSDFSFW+234+34+TEG4565658I890IUGHJDF++SFDS+FS+S+DSAD+Q+Q+++sdf+sdfs+SDF+SD+sdfsdfWEWETsdfsdfsd345SDFFSDFDS3453fsdfssDFSSDD+++++sdf*>+3435++++++++344353+++++++++sdsdff+++++++sdsdff++++++++*"), "Hello world!", "Your interpreter should ignore all alphanumeric characters");

assertEquals(interpreterello world!", "The memory tape in your interpreter should be able to extend to the right indefinitely");

assertEquals(interpreter("+".repeat(84) + "*" + "+".repeat(21) + "*" + "+".repeat(250) + "*++++++++*"), "Tick");